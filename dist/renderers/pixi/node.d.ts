import { PIXIRenderer as Renderer } from '.';
import { Node, Edge } from '../../';
export declare class NodeRenderer<N extends Node, E extends Edge> {
    node: N;
    x: number;
    y: number;
    radius: number;
    strokeWidth: number;
    subgraphNodes: {
        [id: string]: NodeRenderer<N, E>;
    };
    parent?: NodeRenderer<N, E>;
    private renderer;
    private depth;
    private startX;
    private startY;
    private startRadius;
    private endX;
    private endY;
    private endRadius;
    private interpolateX;
    private interpolateY;
    private interpolateRadius;
    private label?;
    private labelFamily?;
    private labelColor?;
    private labelSize?;
    private labelWordWrap?;
    private labelBackground?;
    private stroke?;
    private icon?;
    private badge?;
    private nodeContainer;
    private fillSprite;
    private strokeSpriteContainer;
    private strokeSprites;
    private badgeSpriteContainer?;
    private badgeSprites;
    private labelContainer;
    private labelSprite?;
    private labelBackgroundSprite?;
    private iconSprite?;
    private fontLoader?;
    private fontIconLoader?;
    private badgeFontLoaders;
    private doubleClickTimeout;
    private doubleClick;
    private nodeMoveXOffset;
    private nodeMoveYOffset;
    constructor(renderer: Renderer<N, E>, node: N, x: number, y: number, radius?: number, parent?: NodeRenderer<N, E>);
    update(node: N): this;
    render(): this;
    delete(): void;
    private pointerEnter;
    private pointerLeave;
    private pointerDown;
    private pointerUp;
    private nodeMove;
    private clearDoubleClick;
}
